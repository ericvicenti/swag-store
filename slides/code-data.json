{"swag-App0":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { ScrollView, StyleSheet, View, Dimensions } from \"react-native\";\n\nconst SCREEN_WIDTH = Dimensions.get(\"window\").width;\n\nimport {\n  CheckoutCartScreen,\n  CheckoutShippingScreen,\n  CheckoutBillingScreen,\n  ConfirmationScreen\n} from \"./Screens\";\n\nconst App = () => (\n  <ScrollView horizontal={true} pagingEnabled={true}>\n    <View style={styles.pane}>\n      <CheckoutCartScreen />\n      <CheckoutShippingScreen />\n      <CheckoutBillingScreen />\n      <ConfirmationScreen />\n    </View>\n  </ScrollView>\n);\n\nconst styles = StyleSheet.create({\n  pane: {\n    flexDirection: \"row\",\n    width: 4 * SCREEN_WIDTH\n  }\n});\n\nexport default App;\n","App0":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { ScrollView, StyleSheet, View, Dimensions } from \"react-native\";\n\nconst SCREEN_WIDTH = Dimensions.get(\"window\").width;\n\nimport {\n  CheckoutCartScreen,\n  CheckoutShippingScreen,\n  CheckoutBillingScreen,\n  ConfirmationScreen\n} from \"./Screens\";\n\nconst App = () => (\n  <ScrollView horizontal={true} pagingEnabled={true}>\n    <View style={styles.pane}>\n      <CheckoutCartScreen />\n      <CheckoutShippingScreen />\n      <CheckoutBillingScreen />\n      <ConfirmationScreen />\n    </View>\n  </ScrollView>\n);\n\nconst styles = StyleSheet.create({\n  pane: {\n    flexDirection: \"row\",\n    width: 4 * SCREEN_WIDTH\n  }\n});\n\nexport default App;\n","swag-Common0":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport {\n  Text,\n  View,\n  ScrollView,\n  Dimensions,\n  Image,\n  StyleSheet\n} from \"react-native\";\nimport Ionicons from \"react-native-vector-icons/Ionicons\";\nimport {\n  FormLabel,\n  FormInput,\n  FormValidationMessage\n} from \"react-native-elements\";\nimport { List, ButtonGroup, ListItem, CheckBox } from \"react-native-elements\";\n\nexport class SimplePage extends React.Component {\n  render() {\n    const { children } = this.props;\n    return (\n      <ScrollView style={{ flex: 1 }}>\n        <View style={{ paddingBottom: 20 }}>\n          {children}\n        </View>\n      </ScrollView>\n    );\n  }\n}\n\nconst PRODUCTS = [\n  {\n    id: \"jacket\",\n    name: \"Team Jacket\",\n    price: 40,\n    image: require(\"../assets/team-jacket.jpg\"),\n    exampleQty: 2\n  },\n  {\n    id: \"finger\",\n    name: \"Foam Finger\",\n    price: 10,\n    image: require(\"../assets/foam-finger.jpg\"),\n    exampleQty: 0\n  },\n  {\n    id: \"shirt\",\n    name: \"Shirt\",\n    price: 20,\n    image: require(\"../assets/shirt.jpg\"),\n    exampleQty: 3\n  },\n  {\n    id: \"hat\",\n    name: \"Hat\",\n    price: 15,\n    image: require(\"../assets/hat.jpg\"),\n    exampleQty: 0\n  }\n];\n\nexport class CartPage extends Component {\n  render() {\n    return (\n      <View>\n        <Text\n          style={{\n            fontSize: 42,\n            padding: 18,\n            paddingTop: 40,\n            fontWeight: \"100\"\n          }}\n        >\n          Grab some Swag!\n        </Text>\n        {PRODUCTS.map((product, index) => (\n          <View\n            key={index}\n            style={{\n              flexDirection: \"row\",\n              margin: 18,\n              borderTopWidth: StyleSheet.hairlineWidth,\n              borderTopColor: \"#888\"\n            }}\n          >\n            <Image\n              source={product.image}\n              style={{ width: 100, height: 100, marginTop: 20 }}\n            />\n            <View style={{ flex: 1, padding: 20 }}>\n              <Text style={{ fontSize: 26, fontWeight: \"100\" }}>\n                {product.name}\n              </Text>\n              <Text>${product.price} each</Text>\n            </View>\n            <View\n              style={{ width: 100, paddingVertical: 20, paddingHorizontal: 10 }}\n            >\n              <Text\n                style={{ fontSize: 14, fontWeight: \"100\", textAlign: \"center\" }}\n              >\n                Quantity:\n              </Text>\n              <Text\n                style={{ fontSize: 24, fontWeight: \"100\", textAlign: \"center\" }}\n              >\n                {product.exampleQty}\n              </Text>\n              <ButtonGroup\n                onPress={() => {}}\n                containerStyle={{ flexDirection: \"row\" }}\n                buttons={[\n                  {\n                    element: () => (\n                      <Text style={{ fontSize: 28, fontWeight: \"100\" }}>-</Text>\n                    )\n                  },\n                  {\n                    element: () => (\n                      <Text style={{ fontSize: 28, fontWeight: \"100\" }}>+</Text>\n                    )\n                  }\n                ]}\n              />\n            </View>\n          </View>\n        ))}\n      </View>\n    );\n  }\n}\n\nexport class BillingPage extends Component {\n  render() {\n    return (\n      <View>\n        <Text\n          style={{\n            fontSize: 42,\n            padding: 18,\n            paddingTop: 40,\n            fontWeight: \"100\"\n          }}\n        >\n          Billing Information\n        </Text>\n\n        <FormLabel>Name on Card</FormLabel>\n        <FormInput onChangeText={() => {}} />\n        <FormLabel>Card #</FormLabel>\n        <FormInput onChangeText={() => {}} />\n        <FormLabel>CVV, Exp. Date</FormLabel>\n        <FormInput onChangeText={() => {}} />\n      </View>\n    );\n  }\n}\n\nexport class ShippingPage extends Component {\n  render() {\n    return (\n      <View>\n        <Text\n          style={{\n            fontSize: 42,\n            padding: 18,\n            paddingTop: 40,\n            fontWeight: \"100\"\n          }}\n        >\n          Shipping Details\n        </Text>\n        <FormLabel>Name</FormLabel>\n        <FormInput onChangeText={() => {}} />\n        <FormLabel>Address</FormLabel>\n        <FormInput onChangeText={() => {}} />\n        <FormLabel>City, State, Zip</FormLabel>\n        <FormInput onChangeText={() => {}} />\n      </View>\n    );\n  }\n}\n\nexport class ConfirmationPage extends Component {\n  render() {\n    return (\n      <View style={{ paddingHorizontal: 18, marginBottom: 20 }}>\n        <Text style={{ fontSize: 42, paddingVertical: 40, fontWeight: \"100\" }}>\n          Order Confirmation\n        </Text>\n        <Text\n          style={{\n            fontSize: 18,\n            paddingTop: 8,\n            paddingBottom: 4,\n            color: \"#444\"\n          }}\n        >\n          Cart\n        </Text>\n        <Text style={{ color: \"#444\", fontWeight: \"100\" }}>\n          3x Shirts ($20) = $60\n        </Text>\n        <Text style={{ color: \"#444\", fontWeight: \"100\" }}>\n          2x Team Jackets ($40) = $80\n        </Text>\n        <Text style={{ color: \"#444\", fontWeight: \"100\" }}>\n          Subtotal = $140\n        </Text>\n\n        <Text\n          style={{\n            fontSize: 18,\n            paddingTop: 8,\n            paddingBottom: 4,\n            color: \"#444\"\n          }}\n        >\n          Shipping Details\n        </Text>\n        <Text style={{ color: \"#444\", fontWeight: \"100\" }}>\n          Standard shipping speed\n        </Text>\n        <Text style={{ color: \"#444\", fontWeight: \"100\" }}>\n          Address not yet specified\n        </Text>\n\n        <Text\n          style={{\n            fontSize: 18,\n            paddingTop: 8,\n            paddingBottom: 4,\n            color: \"#444\"\n          }}\n        >\n          Billing Information\n        </Text>\n        <Text style={{ color: \"#444\", fontWeight: \"100\" }}>\n          Paying with VISA*1234\n        </Text>\n      </View>\n    );\n  }\n}\n","Common0":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport {\n  Text,\n  View,\n  ScrollView,\n  Dimensions,\n  Image,\n  StyleSheet\n} from \"react-native\";\nimport Ionicons from \"react-native-vector-icons/Ionicons\";\nimport {\n  FormLabel,\n  FormInput,\n  FormValidationMessage\n} from \"react-native-elements\";\nimport { List, ButtonGroup, ListItem, CheckBox } from \"react-native-elements\";\n\nexport class SimplePage extends React.Component {\n  render() {\n    const { children } = this.props;\n    return (\n      <ScrollView style={{ flex: 1 }}>\n        <View style={{ paddingBottom: 20 }}>\n          {children}\n        </View>\n      </ScrollView>\n    );\n  }\n}\n\nconst PRODUCTS = [\n  {\n    id: \"jacket\",\n    name: \"Team Jacket\",\n    price: 40,\n    image: require(\"../assets/team-jacket.jpg\"),\n    exampleQty: 2\n  },\n  {\n    id: \"finger\",\n    name: \"Foam Finger\",\n    price: 10,\n    image: require(\"../assets/foam-finger.jpg\"),\n    exampleQty: 0\n  },\n  {\n    id: \"shirt\",\n    name: \"Shirt\",\n    price: 20,\n    image: require(\"../assets/shirt.jpg\"),\n    exampleQty: 3\n  },\n  {\n    id: \"hat\",\n    name: \"Hat\",\n    price: 15,\n    image: require(\"../assets/hat.jpg\"),\n    exampleQty: 0\n  }\n];\n\nexport class CartPage extends Component {\n  render() {\n    return (\n      <View>\n        <Text\n          style={{\n            fontSize: 42,\n            padding: 18,\n            paddingTop: 40,\n            fontWeight: \"100\"\n          }}\n        >\n          Grab some Swag!\n        </Text>\n        {PRODUCTS.map((product, index) => (\n          <View\n            key={index}\n            style={{\n              flexDirection: \"row\",\n              margin: 18,\n              borderTopWidth: StyleSheet.hairlineWidth,\n              borderTopColor: \"#888\"\n            }}\n          >\n            <Image\n              source={product.image}\n              style={{ width: 100, height: 100, marginTop: 20 }}\n            />\n            <View style={{ flex: 1, padding: 20 }}>\n              <Text style={{ fontSize: 26, fontWeight: \"100\" }}>\n                {product.name}\n              </Text>\n              <Text>${product.price} each</Text>\n            </View>\n            <View\n              style={{ width: 100, paddingVertical: 20, paddingHorizontal: 10 }}\n            >\n              <Text\n                style={{ fontSize: 14, fontWeight: \"100\", textAlign: \"center\" }}\n              >\n                Quantity:\n              </Text>\n              <Text\n                style={{ fontSize: 24, fontWeight: \"100\", textAlign: \"center\" }}\n              >\n                {product.exampleQty}\n              </Text>\n              <ButtonGroup\n                onPress={() => {}}\n                containerStyle={{ flexDirection: \"row\" }}\n                buttons={[\n                  {\n                    element: () => (\n                      <Text style={{ fontSize: 28, fontWeight: \"100\" }}>-</Text>\n                    )\n                  },\n                  {\n                    element: () => (\n                      <Text style={{ fontSize: 28, fontWeight: \"100\" }}>+</Text>\n                    )\n                  }\n                ]}\n              />\n            </View>\n          </View>\n        ))}\n      </View>\n    );\n  }\n}\n\nexport class BillingPage extends Component {\n  render() {\n    return (\n      <View>\n        <Text\n          style={{\n            fontSize: 42,\n            padding: 18,\n            paddingTop: 40,\n            fontWeight: \"100\"\n          }}\n        >\n          Billing Information\n        </Text>\n\n        <FormLabel>Name on Card</FormLabel>\n        <FormInput onChangeText={() => {}} />\n        <FormLabel>Card #</FormLabel>\n        <FormInput onChangeText={() => {}} />\n        <FormLabel>CVV, Exp. Date</FormLabel>\n        <FormInput onChangeText={() => {}} />\n      </View>\n    );\n  }\n}\n\nexport class ShippingPage extends Component {\n  render() {\n    return (\n      <View>\n        <Text\n          style={{\n            fontSize: 42,\n            padding: 18,\n            paddingTop: 40,\n            fontWeight: \"100\"\n          }}\n        >\n          Shipping Details\n        </Text>\n        <FormLabel>Name</FormLabel>\n        <FormInput onChangeText={() => {}} />\n        <FormLabel>Address</FormLabel>\n        <FormInput onChangeText={() => {}} />\n        <FormLabel>City, State, Zip</FormLabel>\n        <FormInput onChangeText={() => {}} />\n      </View>\n    );\n  }\n}\n\nexport class ConfirmationPage extends Component {\n  render() {\n    return (\n      <View style={{ paddingHorizontal: 18, marginBottom: 20 }}>\n        <Text style={{ fontSize: 42, paddingVertical: 40, fontWeight: \"100\" }}>\n          Order Confirmation\n        </Text>\n        <Text\n          style={{\n            fontSize: 18,\n            paddingTop: 8,\n            paddingBottom: 4,\n            color: \"#444\"\n          }}\n        >\n          Cart\n        </Text>\n        <Text style={{ color: \"#444\", fontWeight: \"100\" }}>\n          3x Shirts ($20) = $60\n        </Text>\n        <Text style={{ color: \"#444\", fontWeight: \"100\" }}>\n          2x Team Jackets ($40) = $80\n        </Text>\n        <Text style={{ color: \"#444\", fontWeight: \"100\" }}>\n          Subtotal = $140\n        </Text>\n\n        <Text\n          style={{\n            fontSize: 18,\n            paddingTop: 8,\n            paddingBottom: 4,\n            color: \"#444\"\n          }}\n        >\n          Shipping Details\n        </Text>\n        <Text style={{ color: \"#444\", fontWeight: \"100\" }}>\n          Standard shipping speed\n        </Text>\n        <Text style={{ color: \"#444\", fontWeight: \"100\" }}>\n          Address not yet specified\n        </Text>\n\n        <Text\n          style={{\n            fontSize: 18,\n            paddingTop: 8,\n            paddingBottom: 4,\n            color: \"#444\"\n          }}\n        >\n          Billing Information\n        </Text>\n        <Text style={{ color: \"#444\", fontWeight: \"100\" }}>\n          Paying with VISA*1234\n        </Text>\n      </View>\n    );\n  }\n}\n","swag-Screens0":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { ScrollView, Dimensions } from \"react-native\";\nimport {\n  SimplePage,\n  CartPage,\n  BillingPage,\n  ShippingPage,\n  ConfirmationPage\n} from \"./Common\";\n\nconst SCREEN_WIDTH = Dimensions.get(\"window\").width;\n\nclass ScreenLayout extends Component {\n  render() {\n    return (\n      <ScrollView style={{ width: SCREEN_WIDTH }}>\n        {this.props.children}\n      </ScrollView>\n    );\n  }\n}\n\nexport class CheckoutCartScreen extends Component {\n  render() {\n    return (\n      <ScreenLayout>\n        <CartPage />\n      </ScreenLayout>\n    );\n  }\n}\n\nexport class CheckoutShippingScreen extends Component {\n  render() {\n    return (\n      <ScreenLayout>\n        <ShippingPage />\n      </ScreenLayout>\n    );\n  }\n}\n\nexport class CheckoutBillingScreen extends Component {\n  render() {\n    return (\n      <ScreenLayout>\n        <BillingPage />\n      </ScreenLayout>\n    );\n  }\n}\n\nexport class ConfirmationScreen extends Component {\n  render() {\n    return (\n      <ScreenLayout>\n        <ConfirmationPage />\n      </ScreenLayout>\n    );\n  }\n}\n","Screens0":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { ScrollView, Dimensions } from \"react-native\";\nimport {\n  SimplePage,\n  CartPage,\n  BillingPage,\n  ShippingPage,\n  ConfirmationPage\n} from \"./Common\";\n\nconst SCREEN_WIDTH = Dimensions.get(\"window\").width;\n\nclass ScreenLayout extends Component {\n  render() {\n    return (\n      <ScrollView style={{ width: SCREEN_WIDTH }}>\n        {this.props.children}\n      </ScrollView>\n    );\n  }\n}\n\nexport class CheckoutCartScreen extends Component {\n  render() {\n    return (\n      <ScreenLayout>\n        <CartPage />\n      </ScreenLayout>\n    );\n  }\n}\n\nexport class CheckoutShippingScreen extends Component {\n  render() {\n    return (\n      <ScreenLayout>\n        <ShippingPage />\n      </ScreenLayout>\n    );\n  }\n}\n\nexport class CheckoutBillingScreen extends Component {\n  render() {\n    return (\n      <ScreenLayout>\n        <BillingPage />\n      </ScreenLayout>\n    );\n  }\n}\n\nexport class ConfirmationScreen extends Component {\n  render() {\n    return (\n      <ScreenLayout>\n        <ConfirmationPage />\n      </ScreenLayout>\n    );\n  }\n}\n","swag-App1":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { TabNavigator } from \"react-navigation\";\n\nimport {\n  CheckoutCartScreen,\n  CheckoutShippingScreen,\n  CheckoutBillingScreen,\n  ConfirmationScreen\n} from \"./Screens\";\n\nconst App = TabNavigator({\n  CheckoutCart: { screen: CheckoutCartScreen },\n  CheckoutShipping: { screen: CheckoutShippingScreen },\n  CheckoutBilling: { screen: CheckoutBillingScreen },\n  Confirmation: { screen: ConfirmationScreen }\n});\n\nexport default App;\n","App1":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { TabNavigator } from \"react-navigation\";\n\nimport {\n  CheckoutCartScreen,\n  CheckoutShippingScreen,\n  CheckoutBillingScreen,\n  ConfirmationScreen\n} from \"./Screens\";\n\nconst App = TabNavigator({\n  CheckoutCart: { screen: CheckoutCartScreen },\n  CheckoutShipping: { screen: CheckoutShippingScreen },\n  CheckoutBilling: { screen: CheckoutBillingScreen },\n  Confirmation: { screen: ConfirmationScreen }\n});\n\nexport default App;\n","swag-Screens1":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { Text, View, ScrollView } from \"react-native\";\nimport { StackNavigator, TabNavigator } from \"react-navigation\";\nimport Ionicons from \"react-native-vector-icons/Ionicons\";\nimport {\n  SimplePage,\n  CartPage,\n  ShippingPage,\n  BillingPage,\n  ConfirmationPage\n} from \"./Common\";\nimport { Button } from \"react-native-elements\";\n\nexport class CheckoutCartScreen extends React.Component {\n  static navigationOptions = {\n    tabBarLabel: \"Cart\",\n    tabBarIcon: ({ tintColor, focused }) => (\n      <Ionicons\n        name={focused ? \"ios-cart\" : \"ios-cart-outline\"}\n        size={26}\n        style={{ color: tintColor, backgroundColor: \"transparent\" }}\n      />\n    )\n  };\n  render() {\n    const { navigate } = this.props.navigation;\n    return (\n      <SimplePage>\n        <CartPage />\n        <Button onPress={() => navigate(\"CheckoutShipping\")} title=\"Next\" />\n      </SimplePage>\n    );\n  }\n}\n\nexport class CheckoutShippingScreen extends React.Component {\n  static navigationOptions = {\n    title: \"Shipping\",\n    tabBarIcon: ({ tintColor, focused }) => (\n      <Ionicons\n        name={focused ? \"ios-navigate\" : \"ios-navigate-outline\"}\n        size={26}\n        style={{ color: tintColor, backgroundColor: \"transparent\" }}\n      />\n    )\n  };\n  render() {\n    const { navigate } = this.props.navigation;\n    return (\n      <SimplePage>\n        <ShippingPage />\n        <Button onPress={() => navigate(\"CheckoutBilling\")} title=\"Next\" />\n      </SimplePage>\n    );\n  }\n}\n\nexport class CheckoutBillingScreen extends React.Component {\n  static navigationOptions = {\n    title: \"Billing\",\n    tabBarIcon: ({ tintColor, focused }) => (\n      <Ionicons\n        name={focused ? \"ios-pricetag\" : \"ios-pricetag-outline\"}\n        size={26}\n        style={{ color: tintColor, backgroundColor: \"transparent\" }}\n      />\n    )\n  };\n\n  render() {\n    const { navigate } = this.props.navigation;\n    return (\n      <SimplePage>\n        <BillingPage />\n        <Button onPress={() => navigate(\"Confirmation\")} title=\"Next\" />\n      </SimplePage>\n    );\n  }\n}\n\nexport class ConfirmationScreen extends React.Component {\n  static navigationOptions = {\n    title: \"Confirmation\",\n    tabBarIcon: ({ tintColor, focused }) => (\n      <Ionicons\n        name={focused ? \"ios-checkmark\" : \"ios-checkmark-outline\"}\n        size={26}\n        style={{ color: tintColor, backgroundColor: \"transparent\" }}\n      />\n    )\n  };\n\n  render() {\n    const { goBack } = this.props.navigation;\n    return (\n      <SimplePage>\n        <ConfirmationPage />\n        <Button onPress={() => goBack()} title=\"Place Order\" />\n      </SimplePage>\n    );\n  }\n}\n","Screens1":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { Text, View, ScrollView } from \"react-native\";\nimport { StackNavigator, TabNavigator } from \"react-navigation\";\nimport Ionicons from \"react-native-vector-icons/Ionicons\";\nimport {\n  SimplePage,\n  CartPage,\n  ShippingPage,\n  BillingPage,\n  ConfirmationPage\n} from \"./Common\";\nimport { Button } from \"react-native-elements\";\n\nexport class CheckoutCartScreen extends React.Component {\n  static navigationOptions = {\n    tabBarLabel: \"Cart\",\n    tabBarIcon: ({ tintColor, focused }) => (\n      <Ionicons\n        name={focused ? \"ios-cart\" : \"ios-cart-outline\"}\n        size={26}\n        style={{ color: tintColor, backgroundColor: \"transparent\" }}\n      />\n    )\n  };\n  render() {\n    const { navigate } = this.props.navigation;\n    return (\n      <SimplePage>\n        <CartPage />\n        <Button onPress={() => navigate(\"CheckoutShipping\")} title=\"Next\" />\n      </SimplePage>\n    );\n  }\n}\n\nexport class CheckoutShippingScreen extends React.Component {\n  static navigationOptions = {\n    title: \"Shipping\",\n    tabBarIcon: ({ tintColor, focused }) => (\n      <Ionicons\n        name={focused ? \"ios-navigate\" : \"ios-navigate-outline\"}\n        size={26}\n        style={{ color: tintColor, backgroundColor: \"transparent\" }}\n      />\n    )\n  };\n  render() {\n    const { navigate } = this.props.navigation;\n    return (\n      <SimplePage>\n        <ShippingPage />\n        <Button onPress={() => navigate(\"CheckoutBilling\")} title=\"Next\" />\n      </SimplePage>\n    );\n  }\n}\n\nexport class CheckoutBillingScreen extends React.Component {\n  static navigationOptions = {\n    title: \"Billing\",\n    tabBarIcon: ({ tintColor, focused }) => (\n      <Ionicons\n        name={focused ? \"ios-pricetag\" : \"ios-pricetag-outline\"}\n        size={26}\n        style={{ color: tintColor, backgroundColor: \"transparent\" }}\n      />\n    )\n  };\n\n  render() {\n    const { navigate } = this.props.navigation;\n    return (\n      <SimplePage>\n        <BillingPage />\n        <Button onPress={() => navigate(\"Confirmation\")} title=\"Next\" />\n      </SimplePage>\n    );\n  }\n}\n\nexport class ConfirmationScreen extends React.Component {\n  static navigationOptions = {\n    title: \"Confirmation\",\n    tabBarIcon: ({ tintColor, focused }) => (\n      <Ionicons\n        name={focused ? \"ios-checkmark\" : \"ios-checkmark-outline\"}\n        size={26}\n        style={{ color: tintColor, backgroundColor: \"transparent\" }}\n      />\n    )\n  };\n\n  render() {\n    const { goBack } = this.props.navigation;\n    return (\n      <SimplePage>\n        <ConfirmationPage />\n        <Button onPress={() => goBack()} title=\"Place Order\" />\n      </SimplePage>\n    );\n  }\n}\n","swag-App2":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { StackNavigator } from \"react-navigation\";\n\nimport { ConfirmationScreen } from \"./Screens\";\n\nimport CheckoutNavigator from \"./CheckoutNavigator\";\n\nconst App = StackNavigator(\n  {\n    Checkout: { screen: CheckoutNavigator },\n    Confirmation: { screen: ConfirmationScreen }\n  },\n  {\n    navigationOptions: { header: null },\n    mode: \"modal\"\n  }\n);\n\nexport default App;\n","App2":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { StackNavigator } from \"react-navigation\";\n\nimport { ConfirmationScreen } from \"./Screens\";\n\nimport CheckoutNavigator from \"./CheckoutNavigator\";\n\nconst App = StackNavigator(\n  {\n    Checkout: { screen: CheckoutNavigator },\n    Confirmation: { screen: ConfirmationScreen }\n  },\n  {\n    navigationOptions: { header: null },\n    mode: \"modal\"\n  }\n);\n\nexport default App;\n","swag-CheckoutNavigator2":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { TabNavigator } from \"react-navigation\";\n\nimport {\n  CheckoutCartScreen,\n  CheckoutShippingScreen,\n  CheckoutBillingScreen\n} from \"./Screens\";\n\nconst CheckoutNavigator = TabNavigator(\n  {\n    CheckoutCart: { screen: CheckoutCartScreen },\n    CheckoutShipping: { screen: CheckoutShippingScreen },\n    CheckoutBilling: { screen: CheckoutBillingScreen }\n  },\n  {\n    swipeEnabled: false,\n    animationEnabled: false\n  }\n);\n\nexport default CheckoutNavigator;\n","CheckoutNavigator2":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { TabNavigator } from \"react-navigation\";\n\nimport {\n  CheckoutCartScreen,\n  CheckoutShippingScreen,\n  CheckoutBillingScreen\n} from \"./Screens\";\n\nconst CheckoutNavigator = TabNavigator(\n  {\n    CheckoutCart: { screen: CheckoutCartScreen },\n    CheckoutShipping: { screen: CheckoutShippingScreen },\n    CheckoutBilling: { screen: CheckoutBillingScreen }\n  },\n  {\n    swipeEnabled: false,\n    animationEnabled: false\n  }\n);\n\nexport default CheckoutNavigator;\n","swag-App3":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { StackNavigator } from \"react-navigation\";\n\nimport { ConfirmationScreen } from \"./Screens\";\n\nimport CheckoutNavigator from \"./CheckoutNavigator\";\n\nconst App = StackNavigator(\n  {\n    Cart: { screen: CheckoutNavigator },\n    Confirmation: { screen: ConfirmationScreen }\n  },\n  {\n    navigationOptions: { header: null },\n    mode: \"modal\"\n  }\n);\n\nexport default App;\n","App3":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { StackNavigator } from \"react-navigation\";\n\nimport { ConfirmationScreen } from \"./Screens\";\n\nimport CheckoutNavigator from \"./CheckoutNavigator\";\n\nconst App = StackNavigator(\n  {\n    Cart: { screen: CheckoutNavigator },\n    Confirmation: { screen: ConfirmationScreen }\n  },\n  {\n    navigationOptions: { header: null },\n    mode: \"modal\"\n  }\n);\n\nexport default App;\n","swag-CheckoutNavigator3":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { addNavigationHelpers, NavigationActions } from \"react-navigation\";\nimport {\n  Animated,\n  Dimensions,\n  ScrollView,\n  StyleSheet,\n  Text,\n  View,\n  Image,\n  TouchableOpacity\n} from \"react-native\";\nimport { Button } from \"react-native-elements\";\n\nimport CheckoutRouter from \"./CheckoutRouter\";\n\nconst SCREEN_WIDTH = Dimensions.get(\"window\").width;\n\nconst CheckoutIcons = {\n  CheckoutCart: require(\"../assets/icon-cart.png\"),\n  CheckoutShipping: require(\"../assets/icon-shipping.png\"),\n  CheckoutBilling: require(\"../assets/icon-billing.png\")\n};\n\nclass CheckoutNavigator extends Component {\n  static router = CheckoutRouter;\n\n  state = { scrollPosition: new Animated.Value(0) };\n\n  componentDidUpdate() {\n    const newIndex = this.props.navigation.state.index;\n    this._scroller.scrollTo({ x: newIndex * SCREEN_WIDTH });\n  }\n\n  render() {\n    const screenNavigationProps = this.props.navigation.state.routes.map(\n      route => {\n        return addNavigationHelpers({\n          state: route,\n          dispatch: this.props.navigation.dispatch\n        });\n      }\n    );\n    const scrollPosition = this.state.scrollPosition;\n    return (\n      <View style={{ flex: 1 }}>\n        <Animated.ScrollView\n          ref={s => {\n            this._scroller = s && s.getNode();\n          }}\n          scrollEventThrottle={1}\n          onScroll={Animated.event(\n            [{ nativeEvent: { contentOffset: { x: scrollPosition } } }],\n            { useNativeDriver: false }\n          )}\n          showsHorizontalScrollIndicator={false}\n          style={{ flex: 1 }}\n          pagingEnabled={true}\n          horizontal={true}\n        >\n          {this.props.navigation.state.routes.map(this.renderScreen)}\n        </Animated.ScrollView>\n        <View\n          style={{\n            height: 50,\n            borderTopWidth: StyleSheet.hairlineWidth,\n            borderTopColor: \"#888\"\n          }}\n        >\n          <View style={{ flexDirection: \"row\" }}>\n            {[\n              \"CheckoutCart\",\n              \"CheckoutShipping\",\n              \"CheckoutBilling\"\n            ].map((routeName, routeIndex) => {\n              const opts = CheckoutRouter.getScreenOptions(\n                screenNavigationProps[routeIndex]\n              );\n              const icon = opts.tabBarIcon({\n                focused: true,\n                tintColor: \"black\"\n              });\n              return (\n                <TouchableOpacity\n                  onPress={() =>\n                    this.props.navigation.dispatch(\n                      NavigationActions.navigate(routeName)\n                    )}\n                  key={routeName}\n                  style={{\n                    backgroundColor: \"transparent\",\n                    height: 50,\n                    width: 80,\n                    alignItems: \"center\",\n                    paddingTop: 0\n                  }}\n                >\n                  <Image\n                    source={CheckoutIcons[routeName]}\n                    style={{ width: 48, height: 48 }}\n                  />\n                </TouchableOpacity>\n              );\n            })}\n            <Animated.View\n              style={{\n                backgroundColor: \"#17591722\",\n                width: SCREEN_WIDTH,\n                position: \"absolute\",\n                right: SCREEN_WIDTH - 80,\n                top: 0,\n                bottom: 0,\n                transform: [\n                  {\n                    translateX: scrollPosition.interpolate({\n                      inputRange: [0, SCREEN_WIDTH],\n                      outputRange: [0, 80]\n                    })\n                  }\n                ]\n              }}\n            />\n            <View style={{ flex: 1 }} />\n            <Button\n              style={{ margin: 3, marginRight: -8 }}\n              raised\n              backgroundColor=\"rgb(20,100,20)\"\n              onPress={() => this.props.navigation.navigate(\"Confirmation\")}\n              title=\"Continue\"\n            />\n          </View>\n        </View>\n      </View>\n    );\n  }\n\n  renderScreen = (route, routeIndex) => {\n    const ScreenComponent = CheckoutRouter.getComponentForRouteName(\n      route.routeName\n    );\n    const screenNavigation = addNavigationHelpers({\n      state: route,\n      dispatch: this.props.navigation.dispatch\n    });\n    return (\n      <View key={route.key} style={{ flex: 1, width: SCREEN_WIDTH }}>\n        <ScreenComponent navigation={screenNavigation} />\n      </View>\n    );\n  };\n\n  positionChangeTimeout: ?number = null;\n\n  componentDidMount() {\n    this.state.scrollPosition.addListener(position => {\n      const navigation = this.props.navigation;\n      const val = position.value;\n      clearTimeout(this.positionChangeTimeout);\n      this.positionChangeTimeout = setTimeout(\n        () => {\n          const computedIndex = Math.ceil(\n            (val - SCREEN_WIDTH / 2) / SCREEN_WIDTH\n          );\n          if (computedIndex !== navigation.state.index) {\n            const routeName = navigation.state.routes[computedIndex].routeName;\n            navigation.navigate(routeName);\n          }\n        },\n        800\n      );\n    });\n  }\n}\n\nexport default CheckoutNavigator;\n","CheckoutNavigator3":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { addNavigationHelpers, NavigationActions } from \"react-navigation\";\nimport {\n  Animated,\n  Dimensions,\n  ScrollView,\n  StyleSheet,\n  Text,\n  View,\n  Image,\n  TouchableOpacity\n} from \"react-native\";\nimport { Button } from \"react-native-elements\";\n\nimport CheckoutRouter from \"./CheckoutRouter\";\n\nconst SCREEN_WIDTH = Dimensions.get(\"window\").width;\n\nconst CheckoutIcons = {\n  CheckoutCart: require(\"../assets/icon-cart.png\"),\n  CheckoutShipping: require(\"../assets/icon-shipping.png\"),\n  CheckoutBilling: require(\"../assets/icon-billing.png\")\n};\n\nclass CheckoutNavigator extends Component {\n  static router = CheckoutRouter;\n\n  state = { scrollPosition: new Animated.Value(0) };\n\n  componentDidUpdate() {\n    const newIndex = this.props.navigation.state.index;\n    this._scroller.scrollTo({ x: newIndex * SCREEN_WIDTH });\n  }\n\n  render() {\n    const screenNavigationProps = this.props.navigation.state.routes.map(\n      route => {\n        return addNavigationHelpers({\n          state: route,\n          dispatch: this.props.navigation.dispatch\n        });\n      }\n    );\n    const scrollPosition = this.state.scrollPosition;\n    return (\n      <View style={{ flex: 1 }}>\n        <Animated.ScrollView\n          ref={s => {\n            this._scroller = s && s.getNode();\n          }}\n          scrollEventThrottle={1}\n          onScroll={Animated.event(\n            [{ nativeEvent: { contentOffset: { x: scrollPosition } } }],\n            { useNativeDriver: false }\n          )}\n          showsHorizontalScrollIndicator={false}\n          style={{ flex: 1 }}\n          pagingEnabled={true}\n          horizontal={true}\n        >\n          {this.props.navigation.state.routes.map(this.renderScreen)}\n        </Animated.ScrollView>\n        <View\n          style={{\n            height: 50,\n            borderTopWidth: StyleSheet.hairlineWidth,\n            borderTopColor: \"#888\"\n          }}\n        >\n          <View style={{ flexDirection: \"row\" }}>\n            {[\n              \"CheckoutCart\",\n              \"CheckoutShipping\",\n              \"CheckoutBilling\"\n            ].map((routeName, routeIndex) => {\n              const opts = CheckoutRouter.getScreenOptions(\n                screenNavigationProps[routeIndex]\n              );\n              const icon = opts.tabBarIcon({\n                focused: true,\n                tintColor: \"black\"\n              });\n              return (\n                <TouchableOpacity\n                  onPress={() =>\n                    this.props.navigation.dispatch(\n                      NavigationActions.navigate(routeName)\n                    )}\n                  key={routeName}\n                  style={{\n                    backgroundColor: \"transparent\",\n                    height: 50,\n                    width: 80,\n                    alignItems: \"center\",\n                    paddingTop: 0\n                  }}\n                >\n                  <Image\n                    source={CheckoutIcons[routeName]}\n                    style={{ width: 48, height: 48 }}\n                  />\n                </TouchableOpacity>\n              );\n            })}\n            <Animated.View\n              style={{\n                backgroundColor: \"#17591722\",\n                width: SCREEN_WIDTH,\n                position: \"absolute\",\n                right: SCREEN_WIDTH - 80,\n                top: 0,\n                bottom: 0,\n                transform: [\n                  {\n                    translateX: scrollPosition.interpolate({\n                      inputRange: [0, SCREEN_WIDTH],\n                      outputRange: [0, 80]\n                    })\n                  }\n                ]\n              }}\n            />\n            <View style={{ flex: 1 }} />\n            <Button\n              style={{ margin: 3, marginRight: -8 }}\n              raised\n              backgroundColor=\"rgb(20,100,20)\"\n              onPress={() => this.props.navigation.navigate(\"Confirmation\")}\n              title=\"Continue\"\n            />\n          </View>\n        </View>\n      </View>\n    );\n  }\n\n  renderScreen = (route, routeIndex) => {\n    const ScreenComponent = CheckoutRouter.getComponentForRouteName(\n      route.routeName\n    );\n    const screenNavigation = addNavigationHelpers({\n      state: route,\n      dispatch: this.props.navigation.dispatch\n    });\n    return (\n      <View key={route.key} style={{ flex: 1, width: SCREEN_WIDTH }}>\n        <ScreenComponent navigation={screenNavigation} />\n      </View>\n    );\n  };\n\n  positionChangeTimeout: ?number = null;\n\n  componentDidMount() {\n    this.state.scrollPosition.addListener(position => {\n      const navigation = this.props.navigation;\n      const val = position.value;\n      clearTimeout(this.positionChangeTimeout);\n      this.positionChangeTimeout = setTimeout(\n        () => {\n          const computedIndex = Math.ceil(\n            (val - SCREEN_WIDTH / 2) / SCREEN_WIDTH\n          );\n          if (computedIndex !== navigation.state.index) {\n            const routeName = navigation.state.routes[computedIndex].routeName;\n            navigation.navigate(routeName);\n          }\n        },\n        800\n      );\n    });\n  }\n}\n\nexport default CheckoutNavigator;\n","swag-CheckoutRouter3":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { TabRouter, NavigationActions } from \"react-navigation\";\n\nimport {\n  CheckoutCartScreen,\n  CheckoutShippingScreen,\n  CheckoutBillingScreen\n} from \"./Screens\";\n\nconst CheckoutRouter = TabRouter({\n  CheckoutCart: { screen: CheckoutCartScreen },\n  CheckoutShipping: { screen: CheckoutShippingScreen },\n  CheckoutBilling: { screen: CheckoutBillingScreen }\n});\n\nexport default CheckoutRouter;\n","CheckoutRouter3":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { TabRouter, NavigationActions } from \"react-navigation\";\n\nimport {\n  CheckoutCartScreen,\n  CheckoutShippingScreen,\n  CheckoutBillingScreen\n} from \"./Screens\";\n\nconst CheckoutRouter = TabRouter({\n  CheckoutCart: { screen: CheckoutCartScreen },\n  CheckoutShipping: { screen: CheckoutShippingScreen },\n  CheckoutBilling: { screen: CheckoutBillingScreen }\n});\n\nexport default CheckoutRouter;\n","swag-App4":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { StackNavigator } from \"react-navigation\";\n\nimport { ConfirmationScreen } from \"./Screens\";\n\nimport CheckoutNavigator from \"./CheckoutNavigator\";\n\nconst App = StackNavigator(\n  {\n    Cart: { screen: CheckoutNavigator },\n    Confirmation: { screen: ConfirmationScreen }\n  },\n  {\n    navigationOptions: { header: null },\n    mode: \"modal\"\n  }\n);\n\nexport default App;\n","App4":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { StackNavigator } from \"react-navigation\";\n\nimport { ConfirmationScreen } from \"./Screens\";\n\nimport CheckoutNavigator from \"./CheckoutNavigator\";\n\nconst App = StackNavigator(\n  {\n    Cart: { screen: CheckoutNavigator },\n    Confirmation: { screen: ConfirmationScreen }\n  },\n  {\n    navigationOptions: { header: null },\n    mode: \"modal\"\n  }\n);\n\nexport default App;\n","swag-CheckoutRouter4":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { TabRouter, NavigationActions } from \"react-navigation\";\n\nimport {\n  CheckoutCartScreen,\n  CheckoutShippingScreen,\n  CheckoutBillingScreen\n} from \"./Screens\";\n\nconst DefaultCheckoutRouter = TabRouter({\n  CheckoutCart: { screen: CheckoutCartScreen },\n  CheckoutShipping: { screen: CheckoutShippingScreen },\n  CheckoutBilling: { screen: CheckoutBillingScreen }\n});\n\nconst CheckoutRouter = {\n  ...DefaultCheckoutRouter,\n\n  getStateForAction: (action, lastState) => {\n    if (action.type === NavigationActions.BACK && lastState.index > 0) {\n      return {\n        ...lastState,\n        index: lastState.index - 1\n      };\n    }\n    if (\n      action.type === NavigationActions.NAVIGATE &&\n      action.routeName === \"Confirmation\" &&\n      lastState.index < lastState.routes.length - 1\n    ) {\n      return {\n        ...lastState,\n        index: lastState.index + 1\n      };\n    }\n    return DefaultCheckoutRouter.getStateForAction(action, lastState);\n  }\n};\n\nexport default CheckoutRouter;\n","CheckoutRouter4":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { TabRouter, NavigationActions } from \"react-navigation\";\n\nimport {\n  CheckoutCartScreen,\n  CheckoutShippingScreen,\n  CheckoutBillingScreen\n} from \"./Screens\";\n\nconst DefaultCheckoutRouter = TabRouter({\n  CheckoutCart: { screen: CheckoutCartScreen },\n  CheckoutShipping: { screen: CheckoutShippingScreen },\n  CheckoutBilling: { screen: CheckoutBillingScreen }\n});\n\nconst CheckoutRouter = {\n  ...DefaultCheckoutRouter,\n\n  getStateForAction: (action, lastState) => {\n    if (action.type === NavigationActions.BACK && lastState.index > 0) {\n      return {\n        ...lastState,\n        index: lastState.index - 1\n      };\n    }\n    if (\n      action.type === NavigationActions.NAVIGATE &&\n      action.routeName === \"Confirmation\" &&\n      lastState.index < lastState.routes.length - 1\n    ) {\n      return {\n        ...lastState,\n        index: lastState.index + 1\n      };\n    }\n    return DefaultCheckoutRouter.getStateForAction(action, lastState);\n  }\n};\n\nexport default CheckoutRouter;\n","swag-App5":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { StackNavigator } from \"react-navigation\";\nimport { CheckoutRoutes } from \"swag-checkout-flow\";\n\nconst App = StackNavigator(\n  {\n    ...CheckoutRoutes\n  },\n  {\n    navigationOptions: { header: null },\n    mode: \"modal\"\n  }\n);\n\nexport default App;\n","App5":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { StackNavigator } from \"react-navigation\";\nimport { CheckoutRoutes } from \"swag-checkout-flow\";\n\nconst App = StackNavigator(\n  {\n    ...CheckoutRoutes\n  },\n  {\n    navigationOptions: { header: null },\n    mode: \"modal\"\n  }\n);\n\nexport default App;\n","swag-checkout-flow-CheckoutNavigator5":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { addNavigationHelpers } from \"react-navigation\";\nimport {\n  Animated,\n  Dimensions,\n  ScrollView,\n  StyleSheet,\n  Text,\n  View,\n  Image,\n  TouchableOpacity\n} from \"react-native\";\nimport { Button } from \"react-native-elements\";\n\nimport CheckoutRouter from \"./CheckoutRouter\";\n\nconst SCREEN_WIDTH = Dimensions.get(\"window\").width;\n\nconst CheckoutIcons = {\n  CheckoutCart: require(\"../assets/icon-cart.png\"),\n  CheckoutShipping: require(\"../assets/icon-shipping.png\"),\n  CheckoutBilling: require(\"../assets/icon-billing.png\")\n};\n\nclass CheckoutNavigator extends Component {\n  static router = CheckoutRouter;\n\n  state = { scrollPosition: new Animated.Value(0) };\n\n  componentDidUpdate() {\n    const newIndex = this.props.navigation.state.index;\n    const scrollView = this._scroller.getNode();\n    scrollView.scrollTo({ x: newIndex * SCREEN_WIDTH });\n  }\n\n  render() {\n    const navigation = this.props.navigation;\n    const scrollPosition = this.state.scrollPosition;\n    const screenNavigationProps = this.props.navigation.state.routes.map(\n      route => {\n        return addNavigationHelpers({\n          state: route,\n          dispatch: navigation.dispatch\n        });\n      }\n    );\n    return (\n      <View style={{ flex: 1 }}>\n        <Animated.ScrollView\n          ref={s => {\n            this._scroller = s;\n          }}\n          scrollEventThrottle={1}\n          onScroll={Animated.event(\n            [{ nativeEvent: { contentOffset: { x: scrollPosition } } }],\n            { useNativeDriver: false }\n          )}\n          showsHorizontalScrollIndicator={false}\n          style={{ flex: 1 }}\n          pagingEnabled={true}\n          horizontal={true}\n        >\n          {this.props.navigation.state.routes.map((route, routeIndex) => {\n            const ScreenComponent = CheckoutRouter.getComponentForRouteName(\n              route.routeName\n            );\n            const screenNavigation = screenNavigationProps[routeIndex];\n            return (\n              <View key={route.key} style={{ flex: 1, width: SCREEN_WIDTH }}>\n                <ScreenComponent navigation={screenNavigation} />\n              </View>\n            );\n          })}\n        </Animated.ScrollView>\n        <View\n          style={{\n            height: 50,\n            borderTopWidth: StyleSheet.hairlineWidth,\n            borderTopColor: \"#888\"\n          }}\n        >\n          <View style={{ flexDirection: \"row\" }}>\n            {[\n              \"CheckoutCart\",\n              \"CheckoutShipping\",\n              \"CheckoutBilling\"\n            ].map((routeName, routeIndex) =>\n              <TouchableOpacity\n                onPress={() => navigation.navigate(routeName)}\n                key={routeName}\n                style={{\n                  backgroundColor: \"transparent\",\n                  height: 50,\n                  width: 80,\n                  alignItems: \"center\",\n                  paddingTop: 0\n                }}\n              >\n                <Image\n                  source={CheckoutIcons[routeName]}\n                  style={{ width: 48, height: 48 }}\n                />\n              </TouchableOpacity>\n            )}\n            <Animated.View\n              pointerEvents=\"none\"\n              style={{\n                backgroundColor: \"#17591722\",\n                width: SCREEN_WIDTH,\n                position: \"absolute\",\n                right: SCREEN_WIDTH - 80,\n                top: 0,\n                bottom: 0,\n                transform: [\n                  {\n                    translateX: scrollPosition.interpolate({\n                      inputRange: [0, SCREEN_WIDTH],\n                      outputRange: [0, 80]\n                    })\n                  }\n                ]\n              }}\n            />\n            <View style={{ flex: 1 }} />\n            <Button\n              style={{ margin: 3, marginRight: -8 }}\n              raised\n              backgroundColor=\"rgb(20,100,20)\"\n              onPress={() => navigation.navigate(\"Confirmation\")}\n              title=\"Continue\"\n            />\n          </View>\n        </View>\n      </View>\n    );\n  }\n\n  positionChangeTimeout: ?number = null;\n\n  componentDidMount() {\n    this.state.scrollPosition.addListener(position => {\n      const navigation = this.props.navigation;\n      const val = position.value;\n      clearTimeout(this.positionChangeTimeout);\n      this.positionChangeTimeout = setTimeout(\n        () => {\n          const computedIndex = Math.ceil(\n            (val - SCREEN_WIDTH / 2) / SCREEN_WIDTH\n          );\n          if (computedIndex !== navigation.state.index) {\n            const routeName = navigation.state.routes[computedIndex].routeName;\n            navigation.navigate(routeName);\n          }\n        },\n        800\n      );\n    });\n  }\n}\n\nexport default CheckoutNavigator;\n","swag-checkout-flow-CheckoutRouter5":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { TabRouter, NavigationActions } from \"react-navigation\";\n\nimport {\n  CheckoutCartScreen,\n  CheckoutShippingScreen,\n  CheckoutBillingScreen\n} from \"./Screens\";\n\nconst DefaultCheckoutRouter = TabRouter({\n  CheckoutCart: { screen: CheckoutCartScreen },\n  CheckoutShipping: { screen: CheckoutShippingScreen },\n  CheckoutBilling: { screen: CheckoutBillingScreen }\n});\n\nconst CheckoutRouter = {\n  ...DefaultCheckoutRouter,\n\n  getStateForAction: (action, lastState) => {\n    if (\n      lastState && action.type === NavigationActions.BACK && lastState.index > 0\n    ) {\n      return {\n        ...lastState,\n        index: lastState.index - 1\n      };\n    }\n    if (\n      lastState &&\n      action.type === NavigationActions.NAVIGATE &&\n      action.routeName === \"Confirmation\" &&\n      lastState.index < lastState.routes.length - 1\n    ) {\n      return {\n        ...lastState,\n        index: lastState.index + 1\n      };\n    }\n    return DefaultCheckoutRouter.getStateForAction(action, lastState);\n  }\n};\n\nexport default CheckoutRouter;\n","swag-checkout-flow-Common5":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { Text, View, ScrollView, Dimensions, Image, StyleSheet} from \"react-native\";\nimport { FormLabel, FormInput, FormValidationMessage } from 'react-native-elements'\nimport { List,ButtonGroup, ListItem, CheckBox } from 'react-native-elements'\n\nexport class SimplePage extends React.Component {\n  render() {\n    const { children } = this.props;\n    return (\n      <ScrollView style={{flex: 1, backgroundColor: 'white'}}><View style={{paddingBottom: 20}}>\n        {children}</View>\n      </ScrollView>\n    );\n  }\n}\n\n\nconst PRODUCTS = [\n  {\n    name: \"Shirt\",\n    price: 20,\n    image: require('../assets/shirt.jpg'),\n    exampleQty: 3,\n  },\n  {\n    name: \"Foam Finger\",\n    price: 10,\n    image: require('../assets/foam-finger.jpg'),\n    exampleQty: 0,\n  },\n  {\n    name: \"Team Jacket\",\n    price: 40,\n    image: require('../assets/team-jacket.jpg'),\n    exampleQty: 2,\n  },\n  {\n    name: \"Hat\",\n    price: 15,\n    image: require('../assets/hat.jpg'),\n    exampleQty: 0,\n  },\n]\n\nexport class CartPage extends Component {\n  render() {\n    return (\n      <View>\n        <Text\n          style={{ fontSize: 42, padding: 18, paddingTop: 40, fontWeight: '100' }}\n        >\n          Get your Swag!\n        </Text>\n        {PRODUCTS.map((product, index) => (\n          <View key={index} style={{flexDirection: 'row', margin: 18, borderTopWidth: StyleSheet.hairlineWidth, borderTopColor: '#888'}}>\n            <Image source={product.image} style={{width: 100, height: 100, marginTop: 20}} />\n            <View style={{flex: 1, padding: 20}}>\n              <Text style={{fontSize: 26, fontWeight: '100'}}>{product.name}</Text>\n              <Text>${product.price} each</Text>\n            </View>\n            <View style={{width: 100, paddingVertical: 20, paddingHorizontal: 10}}>\n              <Text style={{fontSize: 14, fontWeight: '100',  textAlign: 'center'}}>Quantity:</Text>\n              <Text style={{fontSize: 24, fontWeight: '100',  textAlign: 'center'}}>{product.exampleQty}</Text>\n              <ButtonGroup\n                onPress={() => {}}\n                containerStyle={{flexDirection: 'row', }}\n                buttons={[\n                  {element: () => <Text style={{fontSize: 28, fontWeight: '100' }}>-</Text>},\n                  {element: () => <Text style={{fontSize: 28, fontWeight: '100' }}>+</Text>},\n                ]}\n              />\n            </View>\n          </View>\n        ))}\n      </View>\n    );\n  }\n}\n\nexport class BillingPage extends Component {\n  render() {\n    return (\n      <View>\n      <Text\n        style={{ fontSize: 42, padding: 18, paddingTop: 40, fontWeight: '100' }}\n      >\n        Billing Information\n      </Text>\n\n      <FormLabel>Name on Card</FormLabel>\n      <FormInput onChangeText={() => {}}/>\n      <FormLabel>Card #</FormLabel>\n      <FormInput onChangeText={() => {}}/>\n      <FormLabel>CVV, Exp. Date</FormLabel>\n      <FormInput onChangeText={() => {}}/>\n      </View>\n    );\n  }\n}\n\nexport class ShippingPage extends Component {\n  render() {\n    return (\n      <View>\n      <Text\n        style={{ fontSize: 42, padding: 18, paddingTop: 40, fontWeight: '100' }}\n      >\n        Shipping Details\n      </Text>\n\n      <FormLabel>Name</FormLabel>\n      <FormInput onChangeText={() => {}}/>\n      <FormLabel>Address</FormLabel>\n      <FormInput onChangeText={() => {}}/>\n      <FormLabel>City, State, Zip</FormLabel>\n      <FormInput onChangeText={() => {}}/>\n      </View>\n    );\n  }\n}\n\nexport class ConfirmationPage extends Component {\n  render() {\n    return (\n      <View style={{paddingHorizontal: 18, marginBottom: 20}}>\n        <Text\n          style={{ fontSize: 42, paddingVertical: 40, fontWeight: '100' }}\n        >\n          Order Confirmation\n        </Text>\n        <Text\n          style={{ fontSize: 18, paddingTop: 8, paddingBottom: 4, color: '#444' }}\n        >\n          Cart\n        </Text>\n        <Text style={{color: '#444', fontWeight: '100'}}>3x Shirts ($20) = $60</Text>\n        <Text style={{color: '#444', fontWeight: '100'}}>2x Team Jackets ($40) = $80</Text>\n        <Text style={{color: '#444', fontWeight: '100'}}>Subtotal = $140</Text>\n\n        <Text\n          style={{ fontSize: 18, paddingTop: 8, paddingBottom: 4, color: '#444' }}\n        >\n          Shipping Details\n        </Text>\n        <Text style={{color: '#444', fontWeight: '100'}}>Standard shipping speed</Text>\n        <Text style={{color: '#444', fontWeight: '100'}}>Address not yet specified</Text>\n\n        <Text\n          style={{ fontSize: 18, paddingTop: 8, paddingBottom: 4, color: '#444' }}\n        >\n          Billing Information\n        </Text>\n        <Text style={{color: '#444', fontWeight: '100'}}>Paying with VISA*1234</Text>\n      </View>\n    );\n  }\n}\n","swag-checkout-flow-Screens5":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { Text, View, ScrollView } from \"react-native\";\nimport { StackNavigator, TabNavigator } from \"react-navigation\";\nimport { SimplePage, CartPage, ShippingPage, BillingPage, ConfirmationPage } from \"./Common\";\nimport { Button } from 'react-native-elements'\n\nexport class CheckoutCartScreen extends React.Component {\n  static navigationOptions = {\n    tabBarLabel: \"Cart\",\n  };\n  render() {\n    const { navigate } = this.props.navigation;\n    return (\n      <SimplePage>\n        <CartPage />\n        <Button\n          onPress={() => navigate('CheckoutShipping')}\n          title=\"Next\"\n        />\n      </SimplePage>\n    );\n  }\n}\n\nexport class CheckoutShippingScreen extends React.Component {\n  static navigationOptions = {\n    title: \"Shipping\",\n  };\n  render() {\n    const { navigate } = this.props.navigation;\n    return (\n      <SimplePage>\n        <ShippingPage />\n        <Button\n          onPress={() => navigate('CheckoutBilling')}\n          title=\"Next\"\n        />\n      </SimplePage>\n    );\n  }\n}\n\nexport class CheckoutBillingScreen extends React.Component {\n  static navigationOptions = {\n    title: \"Billing\",\n  };\n\n  render() {\n    const { navigate } = this.props.navigation;\n    return (\n      <SimplePage>\n        <BillingPage />\n        <Button\n          onPress={() => navigate('Confirmation')}\n          title=\"Next\"\n        />\n      </SimplePage>\n    );\n  }\n}\n\nexport class ConfirmationScreen extends React.Component {\n  static navigationOptions = {\n    title: \"Confirmation\",\n  };\n\n  render() {\n    const { goBack } = this.props.navigation;\n\n    return (\n      <SimplePage>\n        <ConfirmationPage />\n        <Button\n          onPress={() => goBack()}\n          title=\"Place Order\"\n        />\n      </SimplePage>\n    );\n  }\n}\n","swag-checkout-flow-SwagCheckoutFlow5":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { View, Text } from \"react-native\";\n\nimport {\n  ConfirmationScreen,\n} from \"./Screens\";\n\nimport CheckoutNavigator from \"./CheckoutNavigator\";\n\nconst CheckoutRoutes = {\n  Cart: { screen: CheckoutNavigator },\n  Confirmation: { screen: ConfirmationScreen }\n};\n\nexport {\n  CheckoutRoutes,\n};\n","swag-store-App5":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { StackNavigator } from \"react-navigation\";\nimport { CheckoutRoutes } from \"swag-checkout-flow\";\nimport BrowserNavigator from \"./BrowserNavigator\";\n\nconst App = StackNavigator(\n  {\n    Browse: {screen: BrowserNavigator},\n    ...CheckoutRoutes,\n  },\n  {\n    navigationOptions: { header: null },\n    mode: \"modal\"\n  }\n);\n\nexport default App;\n","swag-store-BrowserNavigator5":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { StackNavigator } from \"react-navigation\";\n\nimport { SwagListScreen, SwagProductScreen } from \"./Screens\";\n\nconst CheckoutNavigator = StackNavigator({\n  SwagList: { screen: SwagListScreen },\n  SwagProduct: { screen: SwagProductScreen }\n});\n\nexport default CheckoutNavigator;\n","swag-store-Common5":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport {\n  Text,\n  View,\n  ScrollView,\n  Dimensions,\n  Image,\n  TouchableOpacity,\n  StyleSheet\n} from \"react-native\";\n\nexport class SimplePage extends React.Component {\n  render() {\n    const { children } = this.props;\n    return (\n      <ScrollView style={{ flex: 1 }}>\n        <View style={{ paddingBottom: 20 }}>\n          {children}\n        </View>\n      </ScrollView>\n    );\n  }\n}\n\nexports.PRODUCTS = [\n  {\n    id: \"jacket\",\n    name: \"Team Jacket\",\n    price: 40,\n    image: require(\"../assets/team-jacket.jpg\"),\n    exampleQty: 2\n  },\n  {\n    id: \"finger\",\n    name: \"Foam Finger\",\n    price: 10,\n    image: require(\"../assets/foam-finger.jpg\"),\n    exampleQty: 0\n  },\n  {\n    id: \"shirt\",\n    name: \"Shirt\",\n    price: 20,\n    image: require(\"../assets/shirt.jpg\"),\n    exampleQty: 3\n  },\n  {\n    id: \"hat\",\n    name: \"Hat\",\n    price: 15,\n    image: require(\"../assets/hat.jpg\"),\n    exampleQty: 0\n  }\n];\n\nexport class SwagBrowseList extends Component {\n  render() {\n    return (\n      <View>\n        {this.props.products.map((product, index) => (\n          <View\n            key={product.id}\n            style={{\n              borderTopWidth: StyleSheet.hairlineWidth,\n              borderTopColor: \"#888\",\n              padding: 0\n            }}\n          >\n            <TouchableOpacity\n              onPress={() => {\n                this.props.onProductPress(product.id);\n              }}\n              key={index}\n              style={{\n                flexDirection: \"row\",\n                margin: 18\n              }}\n            >\n              <Image\n                source={product.image}\n                style={{ width: 100, height: 100 }}\n              />\n              <View style={{ flex: 1, padding: 20 }}>\n                <Text style={{ fontSize: 26, fontWeight: \"100\" }}>\n                  {product.name}\n                </Text>\n                <Text>${product.price} each</Text>\n              </View>\n            </TouchableOpacity>\n          </View>\n        ))}\n      </View>\n    );\n  }\n}\n\nexport class ProductPage extends Component {\n  render() {\n    const { product } = this.props;\n    return (\n      <View>\n        <Image\n          source={product.image}\n          style={{\n            height: 300,\n            alignSelf: \"center\",\n            marginBottom: 15\n          }}\n          resizeMode=\"contain\"\n        />\n        <Text style={{ fontSize: 26, fontWeight: \"100\", marginBottom: 5, textAlign: 'center' }}>\n          {product.name} - ${product.price} each\n        </Text>\n      </View>\n    );\n  }\n}\n","swag-store-Screens5":"/**\n * @flow\n */\n\nimport React, { Component } from \"react\";\nimport { Text, View, ScrollView } from \"react-native\";\nimport { StackNavigator, TabNavigator } from \"react-navigation\";\nimport { SimplePage, SwagBrowseList, ProductPage, PRODUCTS } from \"./Common\";\nimport { Button } from \"react-native-elements\";\n\nexport class SwagListScreen extends React.Component {\n  static navigationOptions = {\n    title: \"Swag Store\"\n  };\n  render() {\n    const { navigate } = this.props.navigation;\n    return (\n      <SimplePage>\n        <SwagBrowseList\n          products={PRODUCTS}\n          onProductPress={productId => navigate(\"SwagProduct\", { productId })}\n        />\n      </SimplePage>\n    );\n  }\n}\n\nexport class SwagProductScreen extends React.Component {\n  static navigationOptions = ({ navigation }) => {\n    const product = PRODUCTS.find(\n      p => p.id === navigation.state.params.productId\n    );\n    return {\n      title: product.name\n    };\n  };\n\n  render() {\n    const { navigate, state } = this.props.navigation;\n    const product = PRODUCTS.find(p => p.id === state.params.productId);\n    return (\n      <SimplePage>\n        <ProductPage product={product} />\n        <Button\n          onPress={() => navigate(\"CheckoutCart\")}\n          title=\"Add to Cart!\"\n        />\n      </SimplePage>\n    );\n  }\n}\n"}